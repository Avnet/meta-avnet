From 516e71b4043b81068feb8c82d56e223aacbb466b Mon Sep 17 00:00:00 2001
From: manjurae <manjurae@xilinx.com>
Date: Wed, 16 Oct 2019 18:00:34 +0530
Subject: [PATCH 05/15] xilinx_pci_endpoint: Add resolution, use case and
 64-bit file size support

Updated following items in xilinx_pcie_endpoint driver:
- 64-bit file size support
- 48-bit read & write offset to support file size greater than 4GB
- resolution, use case type and FPS

Signed-off-by: manjurae <manjurae@xilinx.com>
---
 drivers/misc/xilinx_pci_endpoint.c | 96 +++++++++++++++++++++++++++++++++-----
 1 file changed, 85 insertions(+), 11 deletions(-)

diff --git a/drivers/misc/xilinx_pci_endpoint.c b/drivers/misc/xilinx_pci_endpoint.c
index 951fc13..4840a7d 100644
--- a/drivers/misc/xilinx_pci_endpoint.c
+++ b/drivers/misc/xilinx_pci_endpoint.c
@@ -70,6 +70,8 @@
 #define PCIRC_WRITE_BUFFER_TRANSFER_DONE 0x48
 #define PCIRC_ENC_PARAMS_1        0x4c
 #define PCIRC_ENC_PARAMS_2        0x50
+#define PCIRC_RAW_RESOLUTION      0x54
+#define PCIRC_USECASE_MODE        0x58
 #define PCIRC_READ_BUFFER_TRANSFER_DONE_INTR 0x68
 #define PCIRC_WRITE_BUFFER_TRANSFER_DONE_INTR 0x6c
 #define PCIRC_HOST_DONE_INTR     0x70
@@ -88,6 +90,18 @@
 #define CLR_READ_TRANSFER_DONE    0x6
 #define SET_WRITE_TRANSFER_DONE   0x7
 #define CLR_WRITE_TRANSFER_DONE   0x8
+#define GET_RESOLUTION            0x9
+#define GET_MODE                  0xa
+#define GET_FPS                   0xb
+
+#define WIDTH_SHIFT               0x0
+#define WIDTH_MASK                0xFFFF
+#define HEIGHT_SHIFT              16
+#define HEIGHT_MASK               0xFFFF
+#define USE_CASE_MODE_SHIFT       0x0
+#define USE_CASE_MODE_MASK        0x3
+#define FPS_SHIFT                 0x2
+#define FPS_MASK                  0x3FF
 
 #define L2CACHE_SHIFT             0x0
 #define L2CACHE_MASK		      0x1
@@ -115,6 +129,8 @@
 #define LATENCY_MODE_SHIFT		  0x11
 #define LATENCY_MODE_MASK	      0x3
 
+#define READ_BUF_HIGH_OFFSET      0xFFFF0000
+#define WRITE_BUF_HIGH_OFFSET     0xFFFF0000
 
 static DEFINE_IDA(pciep_device_ida);
 static dev_t  pciep_device_number;
@@ -171,6 +187,10 @@ typedef struct enc_params {
     unsigned int      latency_mode;
 } enc_params;
 
+typedef struct resolution {
+    unsigned int      width;
+    unsigned int      height;
+} resolution;
 
 static inline u32 reg_read(struct pciep_driver_data *this, u32 reg)
 {
@@ -231,12 +251,16 @@ static int pciep_driver_file_open(struct inode *inode, struct file *file)
 static int pciep_driver_file_release(struct inode *inode, struct file *file)
 {
 	struct pciep_driver_data *this = file->private_data;
+	u32 value;
 
 	/* Terminate DMA transfer and reset required flags */
 	this->is_open = 0;
 
 	/* clear all the registers */
 	reg_write(this, PCIEP_READ_BUFFER_OFFSET, PCIEP_CLR_REG);
+	value = reg_read(this, PCIEP_READ_BUFFER_READY);
+	value &= ~READ_BUF_HIGH_OFFSET;
+	reg_write(this, PCIEP_READ_BUFFER_READY, value);
 	reg_write(this, PCIEP_READ_BUFFER_SIZE, PCIEP_CLR_REG);
 	reg_write(this, PCIEP_WRITE_BUFFER_SIZE, PCIEP_CLR_REG);
 
@@ -259,14 +283,18 @@ static long pciep_driver_file_ioctl(struct file *file, unsigned int cmd,
 {
 	struct pciep_driver_data *this = file->private_data;
 	unsigned int value;
-	unsigned int value1;
+	u64 value1;
+	u64 size;
 	struct enc_params params;
+	struct resolution res;
 	int ret;
 
 	switch (cmd) {
 	case GET_FILE_LENGTH:
 			value = reg_read(this, PCIRC_READ_FILE_LENGTH);
-			ret = copy_to_user((int32_t*) arg, &value, sizeof(value));
+			value1 = reg_read(this, (PCIRC_READ_FILE_LENGTH - 4));
+			size = value | value1 << 32;
+			ret = copy_to_user((u64 *) arg, &size, sizeof(size));
 			return ret;
 
 	case GET_ENC_PARAMS:
@@ -275,7 +303,7 @@ static long pciep_driver_file_ioctl(struct file *file, unsigned int cmd,
 			params.low_bandwidth = (value>>LOW_BANDWIDTH_SHIFT) & LOW_BANDWIDTH_MASK;
 			params.filler_data = (value>>FILLER_DATA_SHIFT) & FILLER_DATA_MASK;
 			params.bitrate = (value>>BITRATE_SHIFT) & BITRATE_MASK;
-			params.gop_len = (value>>GOP_LENGTH_SHIFT) & GOP_LENGTH_MASK;		
+			params.gop_len = (value>>GOP_LENGTH_SHIFT) & GOP_LENGTH_MASK;
 
 			value1 = reg_read(this, PCIRC_ENC_PARAMS_2);
 			params.b_frame = (value1>>B_FRAME_SHIFT) & B_FRAME_MASK;
@@ -288,14 +316,36 @@ static long pciep_driver_file_ioctl(struct file *file, unsigned int cmd,
 			ret = copy_to_user((struct enc_params *) arg, &params, sizeof(params));
 			return ret;
 
+	case GET_RESOLUTION:
+			value = reg_read(this, PCIRC_RAW_RESOLUTION);
+			res.width = (value>>WIDTH_SHIFT) & WIDTH_MASK;
+			res.height = (value>>HEIGHT_SHIFT) & HEIGHT_MASK;
+			ret = copy_to_user((struct resolution *) arg, &res, sizeof(res));
+			return ret;
+
+	case GET_MODE:
+			value = reg_read(this, PCIRC_USECASE_MODE);
+			value = (value >> USE_CASE_MODE_SHIFT) & USE_CASE_MODE_MASK;
+			ret = copy_to_user((u32 *) arg, &value, sizeof(value));
+			return ret;
+
+
 	case SET_READ_OFFSET:
-			ret = copy_from_user(&value, (int32_t*) arg, sizeof(value));
-			reg_write(this, PCIEP_READ_BUFFER_OFFSET, value);
+			ret = copy_from_user(&value1, (u64 *) arg, sizeof(value1));
+			reg_write(this, PCIEP_READ_BUFFER_OFFSET, value1);
+		        value = reg_read(this, PCIEP_READ_BUFFER_READY);
+		        value &= ~READ_BUF_HIGH_OFFSET;
+		        value |= (value1 >> 16) & READ_BUF_HIGH_OFFSET;
+		        reg_write(this, PCIEP_READ_BUFFER_READY, value);
 			return ret;
 
 	case SET_WRITE_OFFSET:
-			ret = copy_from_user(&value, (int32_t*) arg, sizeof(value));
-			reg_write(this, PCIEP_WRITE_BUFFER_OFFSET, value);
+			ret = copy_from_user(&value1, (u64 *) arg, sizeof(value1));
+			reg_write(this, PCIEP_WRITE_BUFFER_OFFSET, value1);
+		        value = reg_read(this, PCIEP_WRITE_BUFFER_READY);
+		        value &= ~WRITE_BUF_HIGH_OFFSET;
+		        value |= (value1 >> 16) & WRITE_BUF_HIGH_OFFSET;
+		        reg_write(this, PCIEP_WRITE_BUFFER_READY, value);
 			return ret;
 
 	case SET_READ_TRANSFER_DONE:
@@ -314,6 +364,12 @@ static long pciep_driver_file_ioctl(struct file *file, unsigned int cmd,
 			reg_write(this, PCIEP_WRITE_TRANSFER_DONE, 0x00);
 			return 0;
 
+	case GET_FPS:
+			value = reg_read(this, PCIRC_USECASE_MODE);
+			value = (value >> FPS_SHIFT) & FPS_MASK;
+			ret = copy_to_user((u32 *) arg, &value, sizeof(value));
+			return ret;
+
 	default:
 		return -ENOTTY;
 	}
@@ -331,6 +387,7 @@ static ssize_t pciep_driver_file_read(struct file *file, char __user *buff,
 				      size_t count, loff_t *ppos)
 {
 	struct pciep_driver_data *this = file->private_data;
+	u32 value;
 	int ret;
 
 	/* check the size */
@@ -349,7 +406,9 @@ static ssize_t pciep_driver_file_read(struct file *file, char __user *buff,
 
 	reg_write(this, PCIEP_READ_BUFFER_ADDR, this->read_phys_addr);
 	reg_write(this, PCIEP_READ_BUFFER_SIZE, count);
-	reg_write(this, PCIEP_READ_BUFFER_READY, SET_BUFFER_RDY);
+	value = reg_read(this, PCIEP_READ_BUFFER_READY);
+	value |= SET_BUFFER_RDY;
+	reg_write(this, PCIEP_READ_BUFFER_READY, value);
 
 	/* wait for done event */
 	wait_for_completion(&this->read_complete);
@@ -377,6 +436,7 @@ static ssize_t pciep_driver_file_write(struct file *file,
 {
 	struct pciep_driver_data *this = file->private_data;
 	int ret;
+	u32 value;
 
 	/* check the size */
 	if (count <= 0)
@@ -398,7 +458,9 @@ static ssize_t pciep_driver_file_write(struct file *file,
 
 	reg_write(this, PCIEP_WRITE_BUFFER_ADDR, this->write_phys_addr);
 	reg_write(this, PCIEP_WRITE_BUFFER_SIZE, count);
-	reg_write(this, PCIEP_WRITE_BUFFER_READY, SET_BUFFER_RDY);
+	value = reg_read(this, PCIEP_WRITE_BUFFER_READY);
+	value |= SET_BUFFER_RDY;
+	reg_write(this, PCIEP_WRITE_BUFFER_READY, value);
 
 	/* wait for done event */
 	wait_for_completion(&this->write_complete);
@@ -414,8 +476,13 @@ static ssize_t pciep_driver_file_write(struct file *file,
 static loff_t pciep_driver_file_lseek(struct file *file,loff_t offset, int orig)
 {
 	struct pciep_driver_data *this = file->private_data;
+	u32 value;
 
 	reg_write(this, PCIEP_READ_BUFFER_OFFSET, offset);
+	value = reg_read(this, PCIEP_READ_BUFFER_READY);
+	value &= ~READ_BUF_HIGH_OFFSET;
+	value |= (offset >> 16) & READ_BUF_HIGH_OFFSET;
+	reg_write(this, PCIEP_READ_BUFFER_READY, value);
 	return offset;
 }
 
@@ -441,8 +508,11 @@ static const struct file_operations pciep_driver_file_ops = {
 static irqreturn_t xilinx_pciep_read_irq_handler(int irq, void *data)
 {
 	struct pciep_driver_data *driver_data = data;
+	u32 value;
 
-	reg_write(driver_data, PCIEP_READ_BUFFER_READY, CLR_BUFFER_RDY);
+	value = reg_read(driver_data, PCIEP_READ_BUFFER_READY);
+	value &= ~SET_BUFFER_RDY;
+	reg_write(driver_data, PCIEP_READ_BUFFER_READY, value);
 	complete(&driver_data->read_complete);
 	reg_read(driver_data, PCIRC_READ_BUFFER_TRANSFER_DONE_INTR);
 
@@ -458,9 +528,13 @@ static irqreturn_t xilinx_pciep_read_irq_handler(int irq, void *data)
  */
 static irqreturn_t xilinx_pciep_write_irq_handler(int irq, void *data)
 {
+	u32 value;
 	struct pciep_driver_data *driver_data = data;
 
-	reg_write(driver_data, PCIEP_WRITE_BUFFER_READY, CLR_BUFFER_RDY);
+	value = reg_read(driver_data, PCIEP_WRITE_BUFFER_READY);
+	value &= ~SET_BUFFER_RDY;
+	reg_write(driver_data, PCIEP_WRITE_BUFFER_READY, value);
+
 	complete(&driver_data->write_complete);
 	reg_read(driver_data, PCIRC_WRITE_BUFFER_TRANSFER_DONE_INTR);
 
-- 
2.7.4

